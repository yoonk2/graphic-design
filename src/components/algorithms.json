[
    {
        "type": "insertion",
        "title": "Insertion Sort",
        "kor_title": "삽입 정렬",
        "img": "https://devicetests.com/wp-content/uploads/2022/10/image-431.png",
        "color": "",
        "kor_desc" : "삽입 정렬(揷入整列, insertion sort)은 자료 배열의 모든 요소를 앞에서부터 차례대로 이미 정렬된 배열 부분과 비교하여, 자신의 위치를 찾아 삽입함으로써 정렬을 완성하는 알고리즘이다.",
        "code": "",
        "complexity":""
    },
    {
        "type": "selection",
        "title": "Selection Sort",
        "kor_title": "선택 정렬",
        "img": "https://cdn.elearningindustry.com/wp-content/uploads/2018/11/4-tips-to-select-the-right-course-management-system-for-your-training-company-1024x574.jpg",
        "color": "",
        "kor_desc" : "선택 정렬(選擇整列, selection sort)은 제자리 정렬 알고리즘의 하나로, 다음과 같은 순서로 이루어진다. \n1. 주어진 리스트 중에 최소값을 찾는다.\n2. 그 값을 맨 앞에 위치한 값과 교체한다(패스(pass)).\n3. 맨 처음 위치를 뺀 나머지 리스트를 같은 방법으로 교체한다.\n비교하는 것이 상수 시간에 이루어진다는 가정 아래, n개의 주어진 리스트를 이와 같은 방법으로 정렬하는 데에는 Θ(n2) 만큼의 시간이 걸린다. 선택 정렬은 알고리즘이 단순하며 사용할 수 있는 메모리가 제한적인 경우에 사용시 성능 상의 이점이 있다.",
        "code": "",
        "complexity":""
    },
    {
        "type": "merge",
        "title": "Merge Sort",
        "kor_title": "합병 정렬",
        "img": "https://www.coindesk.com/resizer/gcPTe_VVC1uQrfYllRcQQOckktY=/arc-photo-coindesk/arc2-prod/public/WZEEOG7NONGIXHTI2N6EHHLAIY.jpg",
        "color": "",
        "kor_desc" : "합병 정렬 또는 병합 정렬(영어: merge sort 머지 소트)은 O(n log n) 비교 기반 정렬 알고리즘이다. 일반적인 방법으로 구현했을 때 이 정렬은 안정 정렬에 속하며, 분할 정복 알고리즘의 하나이다. 존 폰 노이만이 1945년에 개발했다. 상향식 합병 정렬에 대한 자세한 설명과 분석은 1948년 초 헤르만 골드스타인과 폰 노이만의 보고서에 등장하였다.",
        "code": "",
        "complexity":""
    },
    {
        "type": "bubble",
        "title": "Bubble Sort",
        "kor_title": "버블 정렬",
        "img": "https://media.istockphoto.com/id/1369351889/vector/transparent-water-realistic-glass-bubbles-bubbles-jpg-vector-jpg.jpg?s=612x612&w=0&k=20&c=U7ygHjp3bRW9vbjMZYFwCS1trvxMBUYrYLQIjfAvygQ=",
        "color": "",
        "kor_desc" : "",
        "code": "",
        "complexity":""
    },
    {
        "type": "tim",
        "title": "Timsort",
        "kor_title": "팀 정렬",
        "img": "https://upload.wikimedia.org/wikipedia/commons/e/e1/%D0%A2%D0%B8%D0%BC_%D0%9A%D1%83%D0%BA_%2802-09-2021%29.jpg",
        "color": "",
        "kor_desc" : "",
        "code": "",
        "complexity":""
    },
    {
        "type": "heap",
        "title": "Heap Sort",
        "kor_title": "힙 정렬",
        "img": "https://alpha.aeon.co/images/cbebce45-df38-4a0a-83b3-2ab9560540d2/idea_sized-mrhyata-362689229_8f984bf22f_o.jpg",
        "color": "",
        "kor_desc" : "힙 정렬(Heap sort)이란 최대 힙 트리나 최소 힙 트리를 구성해 정렬을 하는 방법으로서, 내림차순 정렬을 위해서는 최소 힙을 구성하고 오름차순 정렬을 위해서는 최대 힙을 구성하면 된다.",
        "code": "void downheap(int cur, int k)\n        {\n          int left, right, p;\n            while(cur < k) {\n              left = cur * 2 + 1;\n              right = cur * 2 + 2;\n        \n              if (left >= k && right >= k) break;\n        \n              p = cur;\n              if (left < k && data[p] < data[left]) {\n                p = left;\n              }\n              if (right < k && data[p] < data[right]) {\n                p = right;\n              }\n              if (p == cur) break;\n        \n              swap(&data[cur],&data[p]);\n              cur=p;\n            }\n        }\n        \n        void heapify(int n)\n        {\n          int i,p;\n          for(i = (n-1)/2; i >= 0; i--){\n            downheap(i,n);\n          }\n        }\n        \n        void heap()\n        {\n          int k;\n          heapify(size);\n          for(k = size-1; k > 0; ){\n            swap(&data[0],&data[k]);\n            //k--;\n            downheap(0,k);\n            k--;\n          }\n        }",
        "complexity":""
    },
    {
        "type": "radix",
        "title": "Radix Sort",
        "kor_title": "기수 정렬",
        "img": "",
        "color": "",
        "kor_desc" : "",
        "code": "",
        "complexity":""
    },
    {
        "type": "library",
        "title": "Library Sort",
        "kor_title": "라이브러리 정렬",
        "img": "",
        "color": "",
        "kor_desc": "라이브러리 정렬(library sort, 라이브러리 소트, gapped insertion sort)은 삽입 정렬을 사용하지만 차후의 삽입 속도를 빠르게 하기 위해 배열에 간격을 두는 정렬 알고리즘의 하나이다. 이 알고리즘은 2004년 마이클 A. 벤더, Martin Farach-Colton, 미구엘 모스테이로에 의해 제안되었으며 2006년 출판되었다.",
        "code": "proc rebalance(A, begin, end)\nr ← end\nw ← end * 2\nwhile r >= begin\nA[w+1] ← gap\nA[w] ← A[r]\nr ← r - 1\nw ← w - 2",
        "complexity":""
    },
    {
        "type": "cube",
        "title": "Cube Sort",
        "kor_title": "큐브 정렬",
        "img": "https://www.rubiksplace.com/images/best-speedcubes/2022/gan13-maglev-speedcube.png",
        "color": "",
        "kor_desc": "",
        "code": "",
        "complexity":""
    },
    {
        "type": "smooth",
        "title": "Smoothsort",
        "kor_title": "부드러운 정렬",
        "img": "",
        "color": "",
        "kor_desc": "Dijkstra가 제안한 비교 기반 정렬 알고리즘입니다. Smooth sort는 힙 정렬(heap sort) 알고리즘을 기반으로 하지만, 힙을 더 세분화하여 더욱 효율적인 정렬을 가능하게 한다. Smooth sort는 일반적인 힙 정렬 알고리즘과 달리, 힙의 높이(height)를 점진적으로 증가시키며 정렬한다. 이를 통해 최악의 경우에도 O(n log n)의 시간 복잡도를 보장하면서, 평균적으로 O(n log n)보다 빠른 실행 시간을 보인다.",
        "code": "",
        "complexity":""
    },
    {
        "type": "gnome",
        "title": "Gnome Sort",
        "kor_title": "난쟁이 정렬",
        "img": "",
        "color": "",
        "kor_desc": "",
        "code": "",
        "complexity":""
    },
    {
        "type": "odd-even",
        "title": "Odd-Even Sort",
        "kor_title": "홀짝 정렬",
        "img": "",
        "color": "",
        "kor_desc": "",
        "code": "",
        "complexity":""
    },
    {
        "type": "tree",
        "title": "Tree Sort",
        "kor_title": "트리 정렬",
        "img": "https://img.freepik.com/free-photo/single-green-tree-on-clear-sky_181624-46695.jpg?w=2000",
        "color": "",
        "kor_desc": "",
        "code": "",
        "complexity":""
    },{
        "type": "block",
        "title": "Block Sort",
        "kor_title": "블록 정렬",
        "img": "",
        "color": "",
        "kor_desc": "",
        "code": "",
        "complexity":""
    },{
        "type": "intro",
        "title": "Introsort",
        "kor_title": "",
        "img": "",
        "color": "",
        "kor_desc": "",
        "code": "",
        "complexity":""
    }, {
        "type": "quick",
        "title": "Quick Sort",
        "kor_title": "퀵 정렬",
        "img": "https://a1cf74336522e87f135f-2f21ace9a6cf0052456644b80fa06d4f.ssl.cf2.rackcdn.com/images/characters/large/800/Quicksilver-Avengers.Age.of.Ultron.webp",
        "color": "",
        "kor_desc": "퀵 정렬(Quicksort)은 찰스 앤터니 리처드 호어가 개발한 정렬 알고리즘이다. 다른 원소와의 비교만으로 정렬을 수행하는 비교 정렬에 속한다. 퀵 정렬은 n개의 데이터를 정렬할 때, 최악의 경우에는 O(n2)번의 비교를 수행하고, 평균적으로 O(n log n)번의 비교를 수행한다.",
        "code": "function partition(arr, left, right, pivot_index)\n    pivot_value := arr[pivot_index]\n    swap(arr[pivot_index], arr[right]) // 피벗을 끝으로 옮겨 놓는다.\n    stored_index := left\n    for i in range (left,right) // left에서부터 (right-1)까지\n        if arr[i] ≤ pivot_value then\n            swap(arr[stored_index], arr[i])\n            stored_index := stored_index + 1\n    swap(arr[right], arr[stored_index]) // 피벗을 두 리스트 사이에 위치시킨다.\n\n    return stored_index",
        "complexity":""
    }, {
        "type": "shell",
        "title": "Shellort",
        "kor_title": "셸 정렬",
        "img": "https://www.worldatlas.com/r/w1200/upload/35/76/7b/shutterstock-260365799.jpg",
        "color": "",
        "kor_desc": "셸 정렬(영어: shell sort)은 가장 오래된 정렬 알고리즘의 하나이다. 이름은 1959년 이 방법을 발표한 창안자 도널드 셸의 이름을 따서 붙여졌다. 셸 정렬은 개념을 이해하고 구현하기는 쉬우나 시간복잡도 분석은 조금 복잡하다.",
        "code": "def Shellsort(arr):\n    h = 1\n    while h < len(arr):\n        h = 3*h + 1\n    h = h//3\n\n    while h > 0:\n        for i in range(h,len(arr)):\n            k=i-h\n            key=arr[i]\n            while k>=0 and key < arr[k]:\n                arr[k+h] = arr[k]\n                k=k-h\n            arr[k+h] = key\n        h = h//3\n    return arr",
        "complexity":""
    },{
        "type": "cycle",
        "title": "Cycle Sort",
        "kor_title": "",
        "img": "",
        "color": "",
        "kor_desc": "",
        "code": "void cycle_sort(type_array *Array, int array_size)\n    {\n        for (int cycle_start = 0; cycle_start < array_size - 1; cycle_start++)\n        {\n            type_array item = Array[cycle_start];\n    \n            int pos = cycle_start;\n            for (int i = cycle_start + 1; i < array_size; i++)\n                if (Array[i] < item)\n                    pos += 1;\n            if (pos == cycle_start)\n                continue;\n            while (item == Array[pos])\n                pos += 1;\n    \n            swap(Array[pos], item);\n    \n            while (pos != cycle_start)\n            {\n                pos = cycle_start;\n                for (int i = cycle_start + 1; i < array_size; i++)\n                    if (Array[i] < item)\n                        pos += 1;\n                while (item == Array[pos])\n                    pos += 1;\n    \n                swap(Array[pos], item);\n            }\n        }\n    }",
        "complexity":""
    },
    {
        "type": "cocktail",
        "title": "Cocktail Shaker Sort",
        "kor_title": "칵테일 셰이커 정렬",
        "img": "https://cocktailsdistilled.com/wp-content/uploads/2019/11/00024358-021B-4F7C-8D1C-01E5E53519DF.gif",
        "color": "",
        "kor_desc": "칵테일 셰이커 정렬(영어: cocktail shaker sort 칵테일 셰이커 소트), 양방향 거품 정렬(영어: bidirectional bubble sort 비디렉셔널 버블 소트) 또는 셰이커 정렬(영어: shaker sort 셰이커 소트)은 정렬 알고리즘 중 하나로, 버블 정렬의 변형이다.",
        "code": "void cocktailShaker(BidirectionalIterator first, BidirectionalIterator last)\n{\n    BidirectionalIterator shift = first;\n    BidirectionalIterator i;\n\n    while (first < last) {\n        i = first;\n        while (++i < last) {        // [shift, last)\n            if (*i < *(i-1)) {\n                std::iter_swap(i, i-1);\n                shift = i;\n            }\n        }\n        last = shift;\n\n        i = last;\n        while (--i > first) {        // (shift, first]\n            if (*i < *(i-1)) {\n                std::iter_swap(i, i-1);\n                shift = i;\n            }\n        }\n        first = shift;\n    }\n}",
        "complexity":""
    },{
        "type": "comb",
        "title": "Comb Sort",
        "kor_title": "빗질 정렬",
        "img": "https://m.media-amazon.com/images/I/71WmBY-nquL._SL1500_.jpg",
        "color": "",
        "kor_desc": "빗질 정렬(comb sort)은 버블 정렬을 개선한 정렬 알고리즘으로, 1980년 Włodzimierz Dobosiewicz가 설계하였다. 다른 정렬 알고리즘에 비해 상대적으로 단순하다. 1991년에 스테판 레이시(영어: Stephen Lacey)와 리차드 박스(영어: Richard Box)가 재발견하였다.",
        "code": "function combsort(array input)\n    gap := input.size // Initialize gap size\n    shrink := 1.3 // Set the gap shrink factor\n    sorted := false\n    loop while sorted = false\n        // Update the gap value for a next comb\n        gap := floor(gap / shrink)\n        if gap > 1\n            sorted := false // We are never sorted as long as gap > 1\n        else\n            gap := 1\n            sorted := true // If there are no swaps this pass, we are done\n        end if\n        // A single \"comb\" over the input list\n        i := 0\n        loop while i + gap < input.size // See Shell sort for a similar idea\n            if input[i] > input[i+gap]\n                swap (input[i], input[i+gap])\n                sorted := false\n                // If this assignment never happens within the loop,\n                // then there have been no swaps and the list is sorted.\n             end if\n             i := i + 1\n         end loop\n         \n\n     end loop\n end function",
        "complexity":""
    }
]